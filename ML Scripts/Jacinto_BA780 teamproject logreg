{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Jacinto_BA780 teamproject logreg","provenance":[],"mount_file_id":"1x_5UnxCPfnO2-xRhGAk1xQpG5TKu1eqD","authorship_tag":"ABX9TyNsj5Xb1u2dDTNPN2BCX3pe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"ya7CkXTjnANf"},"source":["#Logistic Regression"]},{"cell_type":"code","metadata":{"id":"bTC6KZksJWKJ","colab":{"base_uri":"https://localhost:8080/","height":179},"executionInfo":{"status":"ok","timestamp":1633960140676,"user_tz":240,"elapsed":205,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"8d84d7df-caf0-4797-f30d-921e183d5ece"},"source":["import pandas as pd\n","import seaborn as sns\n","\n","df_ML = pd.read_csv('/content/drive/MyDrive/BA780/Team8_Project Folder/dataset_ML.csv')\n","df_ML.head(3)"],"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>city_development_index</th>\n","      <th>experience</th>\n","      <th>last_new_job</th>\n","      <th>training_hours</th>\n","      <th>target</th>\n","      <th>gender_Male</th>\n","      <th>gender_Other</th>\n","      <th>relevent_experience_No relevent experience</th>\n","      <th>enrolled_university_Part time course</th>\n","      <th>enrolled_university_no_enrollment</th>\n","      <th>education_level_Phd</th>\n","      <th>education_level_Undergraduate</th>\n","      <th>cdi_bucket_medium_human_development</th>\n","      <th>cdi_bucket_high_human_development</th>\n","      <th>cdi_bucket_very_high_human_development</th>\n","      <th>company_type_Other</th>\n","      <th>company_type_Public Sector</th>\n","      <th>company_type_Pvt Ltd</th>\n","      <th>company_type_Startup Company</th>\n","      <th>company_type_Unknown</th>\n","      <th>major_STEM</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0.920</td>\n","      <td>21</td>\n","      <td>1</td>\n","      <td>36</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0.776</td>\n","      <td>15</td>\n","      <td>5</td>\n","      <td>47</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4</td>\n","      <td>0.767</td>\n","      <td>21</td>\n","      <td>4</td>\n","      <td>8</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Unnamed: 0  city_development_index  ...  company_type_Unknown  major_STEM\n","0           0                   0.920  ...                     1           1\n","1           1                   0.776  ...                     0           1\n","2           4                   0.767  ...                     0           1\n","\n","[3 rows x 22 columns]"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","metadata":{"id":"d0PFOOWCjrAc","executionInfo":{"status":"ok","timestamp":1633960140846,"user_tz":240,"elapsed":8,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}}},"source":["df_ML = df_ML.drop([\"Unnamed: 0\"], axis=1)"],"execution_count":46,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dXiZozn6100o","executionInfo":{"status":"ok","timestamp":1633960140847,"user_tz":240,"elapsed":8,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"266b8880-071a-49f1-ddd1-cfd3091ace52"},"source":["df_ML.info()"],"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 12477 entries, 0 to 12476\n","Data columns (total 21 columns):\n"," #   Column                                      Non-Null Count  Dtype  \n","---  ------                                      --------------  -----  \n"," 0   city_development_index                      12477 non-null  float64\n"," 1   experience                                  12477 non-null  int64  \n"," 2   last_new_job                                12477 non-null  int64  \n"," 3   training_hours                              12477 non-null  int64  \n"," 4   target                                      12477 non-null  float64\n"," 5   gender_Male                                 12477 non-null  int64  \n"," 6   gender_Other                                12477 non-null  int64  \n"," 7   relevent_experience_No relevent experience  12477 non-null  int64  \n"," 8   enrolled_university_Part time course        12477 non-null  int64  \n"," 9   enrolled_university_no_enrollment           12477 non-null  int64  \n"," 10  education_level_Phd                         12477 non-null  int64  \n"," 11  education_level_Undergraduate               12477 non-null  int64  \n"," 12  cdi_bucket_medium_human_development         12477 non-null  int64  \n"," 13  cdi_bucket_high_human_development           12477 non-null  int64  \n"," 14  cdi_bucket_very_high_human_development      12477 non-null  int64  \n"," 15  company_type_Other                          12477 non-null  int64  \n"," 16  company_type_Public Sector                  12477 non-null  int64  \n"," 17  company_type_Pvt Ltd                        12477 non-null  int64  \n"," 18  company_type_Startup Company                12477 non-null  int64  \n"," 19  company_type_Unknown                        12477 non-null  int64  \n"," 20  major_STEM                                  12477 non-null  int64  \n","dtypes: float64(2), int64(19)\n","memory usage: 2.0 MB\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AHX0XjoY2iYa","executionInfo":{"status":"ok","timestamp":1633960140847,"user_tz":240,"elapsed":6,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"a7b57f53-40ec-4037-fc2b-a8934cfa59c7"},"source":["df_ML.isnull().sum()"],"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["city_development_index                        0\n","experience                                    0\n","last_new_job                                  0\n","training_hours                                0\n","target                                        0\n","gender_Male                                   0\n","gender_Other                                  0\n","relevent_experience_No relevent experience    0\n","enrolled_university_Part time course          0\n","enrolled_university_no_enrollment             0\n","education_level_Phd                           0\n","education_level_Undergraduate                 0\n","cdi_bucket_medium_human_development           0\n","cdi_bucket_high_human_development             0\n","cdi_bucket_very_high_human_development        0\n","company_type_Other                            0\n","company_type_Public Sector                    0\n","company_type_Pvt Ltd                          0\n","company_type_Startup Company                  0\n","company_type_Unknown                          0\n","major_STEM                                    0\n","dtype: int64"]},"metadata":{},"execution_count":48}]},{"cell_type":"markdown","metadata":{"id":"0NcvrjI2GuIg"},"source":["##Target variable"]},{"cell_type":"markdown","metadata":{"id":"LaMy_zUgGytM"},"source":["First we will observe the distribution of the target variable \"TenYearCHD\". Our goal is predicting whether a patient will develop heart desease in 10 years or not. Therefore we used a binary classification problem."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-6gP2N7EG7LW","executionInfo":{"status":"ok","timestamp":1633960140847,"user_tz":240,"elapsed":4,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"64afa412-f171-4455-f328-e4a648bd961e"},"source":["df_ML.groupby('target').size()/df_ML.shape[0]"],"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["target\n","0.0    0.762283\n","1.0    0.237717\n","dtype: float64"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"9DKTj_XZHEwj","executionInfo":{"status":"ok","timestamp":1633960141194,"user_tz":240,"elapsed":350,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"7e2257d1-ee9e-4e6e-ee7e-32ad727d011e"},"source":["sns.catplot(y=\"target\", kind=\"count\", data=df_ML, height=2.6, aspect=2.5);"],"execution_count":50,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 468x187.2 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"TbamAXAmHREQ"},"source":["We see that the target variable is very unbalanced"]},{"cell_type":"markdown","metadata":{"id":"II2AqoxY3clc"},"source":["##Feature matrix and Target vector"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HIgtwmZ23kpt","executionInfo":{"status":"ok","timestamp":1633960141194,"user_tz":240,"elapsed":7,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"76d0de8b-3845-4e3a-b187-c6c5892654c4"},"source":["X = df_ML.drop(\"target\", axis = 1)\n","X.shape"],"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(12477, 20)"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cnsXt-yM3zjr","executionInfo":{"status":"ok","timestamp":1633960141194,"user_tz":240,"elapsed":5,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"de20a548-492e-40e2-a7f9-376aaec4c457"},"source":["y = df_ML[\"target\"]\n","y.shape"],"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(12477,)"]},"metadata":{},"execution_count":52}]},{"cell_type":"markdown","metadata":{"id":"0vdTBcqt4B6R"},"source":["##Split the data randomly into train and test with a 70-30 split (use random_state=780)"]},{"cell_type":"code","metadata":{"id":"EA5efsGAmDt6","executionInfo":{"status":"ok","timestamp":1633960141195,"user_tz":240,"elapsed":5,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}}},"source":["def train_and_predict(X_train_model, X_test_model, y_train_model, y_test_model, classifier):  ## Function takes in traintest split dataset and ML model - fits & predicts the model, calculates metrics\n","  ## Training the Model\n","  classifier.fit(X_train_model, y_train_model)\n","  ## Predicting the model\n","  y_model_tp = classifier.predict(X_test_model)\n","  ## Accuracy score\n","  a_score = accuracy_score(y_test_model, y_model_tp)\n","  print(\"The Accuracy is {}\".format(a_score))\n","  ## Calculating sensitivity\n","  TP = sum((y_test_model == 1) & (y_model_tp == 1))\n","  p = sum((y_test_model == 1))\n","  TPR = TP/p\n","  print(\"The Sensitivity / True Positive Rate (TPR) is {}\".format(TPR))\n","  ## Calculating Specifictiy\n","  N = sum(y_test_model == 0)\n","  TN = sum((y_test_model == 0) & (y_model_tp == 0))\n","  TNR = TN/N\n","  print(\"The Specifictiy / TNR  is {}\".format(TNR))\n","  return [a_score,TPR,TNR]"],"execution_count":53,"outputs":[]},{"cell_type":"code","metadata":{"id":"sx9Qvpj64P5K","executionInfo":{"status":"ok","timestamp":1633960141195,"user_tz":240,"elapsed":5,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}}},"source":["from sklearn.model_selection import train_test_split\n","Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.3, random_state=780)"],"execution_count":54,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"k6mDHdp34JPX"},"source":["##Instantiate and fit a logistic regression model"]},{"cell_type":"code","metadata":{"id":"62nd2E7H4qDp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633960141379,"user_tz":240,"elapsed":188,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"c5c349f9-c724-41a3-8998-31da1f35d258"},"source":["from sklearn.linear_model import LogisticRegression \n","model = LogisticRegression(solver=\"liblinear\")\n","model.fit(Xtrain, ytrain)"],"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n","                   multi_class='auto', n_jobs=None, penalty='l2',\n","                   random_state=None, solver='liblinear', tol=0.0001, verbose=0,\n","                   warm_start=False)"]},"metadata":{},"execution_count":55}]},{"cell_type":"markdown","metadata":{"id":"EVlXKvWf4Kwp"},"source":["##Make predictions and find the overall accuracy, sensitivity, and specificity on your test set"]},{"cell_type":"code","metadata":{"id":"SvnON1IC4Odf","executionInfo":{"status":"ok","timestamp":1633960141379,"user_tz":240,"elapsed":12,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}}},"source":["y_model = model.predict(Xtest)"],"execution_count":56,"outputs":[]},{"cell_type":"code","metadata":{"id":"t5kVT5QK4DtR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633960189201,"user_tz":240,"elapsed":161,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"6c615e8a-5ae4-48f1-e481-e6a03df1ec1c"},"source":["from sklearn.metrics import accuracy_score\n","print(\"Acurracy score:\",accuracy_score(ytest, y_model))"],"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["Acurracy score: 0.7756410256410257\n"]}]},{"cell_type":"code","metadata":{"id":"m060hT2g6sEq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633960141380,"user_tz":240,"elapsed":10,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"68415afd-8ef4-4de0-ce9b-42629d84ed98"},"source":["ytest"],"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9242     0.0\n","9419     1.0\n","2020     1.0\n","8030     0.0\n","7607     0.0\n","        ... \n","1736     1.0\n","9447     0.0\n","9449     0.0\n","7940     0.0\n","12145    1.0\n","Name: target, Length: 3744, dtype: float64"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","metadata":{"id":"5U7XJ36l55C_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633960141380,"user_tz":240,"elapsed":8,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"5b17c8b0-b976-497e-909b-7923e6b80e8c"},"source":["#Sensitivity\n","P = sum(ytest == 1)\n","P"],"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["870"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","metadata":{"id":"GZ-Iu-7V6hTR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633960141380,"user_tz":240,"elapsed":6,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"ae58fe9b-16c3-464a-9cc7-86c56156705b"},"source":["TP = sum((ytest == 1) & (y_model == 1))\n","TP"],"execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/plain":["170"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","metadata":{"id":"ZrCDXg7A7nQm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633960218755,"user_tz":240,"elapsed":139,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"74503a78-151a-43cf-8536-8e2a97db6756"},"source":["print(\"Sensitivity:\",TP/P)"],"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["Sensitivity: 0.19540229885057472\n"]}]},{"cell_type":"code","metadata":{"id":"5C6xycP776NT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633960141380,"user_tz":240,"elapsed":4,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"4aa6093c-975c-426a-a023-2da774f69ce1"},"source":["#Specificity\n","N = sum(ytest == 0)\n","N"],"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2874"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"zIyKFLpW8DgB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633960141517,"user_tz":240,"elapsed":6,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"b0689f11-4b7d-4c15-cdf9-39287931e809"},"source":["TN = sum((ytest == 0) & (y_model == 0))\n","TN"],"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2734"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","metadata":{"id":"APX_ACeP8Lco","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633960239430,"user_tz":240,"elapsed":143,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"5aa63c44-257f-41b7-daa8-a4a7d7f6c38e"},"source":["print(\"Specificity:\",TN/N)"],"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["Specificity: 0.9512874043145442\n"]}]},{"cell_type":"code","metadata":{"id":"eXvCx7HZ-7zd","colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"status":"error","timestamp":1633960141657,"user_tz":240,"elapsed":143,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"679f10dc-e4c2-4a19-89f9-e7693b054074"},"source":["train_and_predict(Xtrain, Xtest, ytrain, ytest, LogisticRegression)"],"execution_count":65,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-65-fb674872cf1f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain_and_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mXtest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mytrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mytest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLogisticRegression\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-53-f755a73ad7a6>\u001b[0m in \u001b[0;36mtrain_and_predict\u001b[0;34m(X_train_model, X_test_model, y_train_model, y_test_model, classifier)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mtrain_and_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclassifier\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m## Function takes in traintest split dataset and ML model - fits & predicts the model, calculates metrics\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m   \u001b[0;31m## Training the Model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m   \u001b[0mclassifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train_model\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m   \u001b[0;31m## Predicting the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0my_model_tp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclassifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_model\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: fit() missing 1 required positional argument: 'y'"]}]},{"cell_type":"code","metadata":{"id":"6qVRjc5y_x-L","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1633960258846,"user_tz":240,"elapsed":443,"user":{"displayName":"Jacinto Lemarroy Pipper","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13892682166500509729"}},"outputId":"793ad8de-2878-417c-a623-956ca6c6fd13"},"source":["# creating AUC/ROC graph\n","import sklearn.metrics as metrics\n","probs = model.predict_proba(Xtest)\n","preds = probs[:,1]\n","fpr, tpr, threshold = metrics.roc_curve(ytest, preds)\n","roc_auc = metrics.auc(fpr, tpr)\n","import matplotlib.pyplot as plt\n","plt.title('Receiver Operating Characteristic')\n","plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\n","plt.legend(loc = 'lower right')\n","plt.plot([0, 1], [0, 1],'r--')\n","plt.xlim([0, 1])\n","plt.ylim([0, 1])\n","plt.ylabel('True Positive Rate')\n","plt.xlabel('False Positive Rate')\n","plt.show()"],"execution_count":70,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]}]}